{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "input-group",
  "file": {
    "name": "input-group.tsx",
    "content": "import type { BoxProps, InputElementProps } from \"@chakra-ui/react\"\nimport { Group, InputElement } from \"@chakra-ui/react\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps extends BoxProps {\n  startElementProps?: InputElementProps\n  endElementProps?: InputElementProps\n  startElement?: React.ReactNode\n  endElement?: React.ReactNode\n  children: React.ReactElement\n  startOffset?: InputElementProps[\"paddingStart\"]\n  endOffset?: InputElementProps[\"paddingEnd\"]\n}\n\nexport const InputGroup = React.forwardRef<HTMLDivElement, InputGroupProps>(\n  function InputGroup(props, ref) {\n    const {\n      startElement,\n      startElementProps,\n      endElement,\n      endElementProps,\n      children,\n      startOffset = \"6px\",\n      endOffset = \"6px\",\n      ...rest\n    } = props\n\n    const child =\n      React.Children.only<React.ReactElement<InputElementProps>>(children)\n\n    return (\n      <Group ref={ref} {...rest}>\n        {startElement && (\n          <InputElement pointerEvents=\"none\" {...startElementProps}>\n            {startElement}\n          </InputElement>\n        )}\n        {React.cloneElement(child, {\n          ...(startElement && {\n            ps: `calc(var(--input-height) - ${startOffset})`,\n          }),\n          ...(endElement && { pe: `calc(var(--input-height) - ${endOffset})` }),\n          ...children.props,\n        })}\n        {endElement && (\n          <InputElement placement=\"end\" {...endElementProps}>\n            {endElement}\n          </InputElement>\n        )}\n      </Group>\n    )\n  },\n)\n"
  },
  "component": "InputGroup"
}
{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "slider",
  "file": {
    "name": "slider.tsx",
    "content": "import { Slider as ChakraSlider, For, HStack } from \"@chakra-ui/react\"\nimport * as React from \"react\"\n\nexport interface SliderProps extends ChakraSlider.RootProps {\n  marks?: Array<number | { value: number; label: React.ReactNode }>\n  label?: React.ReactNode\n  showValue?: boolean\n}\n\nexport const Slider = React.forwardRef<HTMLDivElement, SliderProps>(\n  function Slider(props, ref) {\n    const { marks: marksProp, label, showValue, ...rest } = props\n    const value = props.defaultValue ?? props.value\n\n    const marks = marksProp?.map((mark) => {\n      if (typeof mark === \"number\") return { value: mark, label: undefined }\n      return mark\n    })\n\n    const hasMarkLabel = !!marks?.some((mark) => mark.label)\n\n    return (\n      <ChakraSlider.Root ref={ref} thumbAlignment=\"center\" {...rest}>\n        {label && !showValue && (\n          <ChakraSlider.Label>{label}</ChakraSlider.Label>\n        )}\n        {label && showValue && (\n          <HStack justify=\"space-between\">\n            <ChakraSlider.Label>{label}</ChakraSlider.Label>\n            <ChakraSlider.ValueText />\n          </HStack>\n        )}\n        <ChakraSlider.Control data-has-mark-label={hasMarkLabel || undefined}>\n          <ChakraSlider.Track>\n            <ChakraSlider.Range />\n          </ChakraSlider.Track>\n          <SliderThumbs value={value} />\n          <SliderMarks marks={marks} />\n        </ChakraSlider.Control>\n      </ChakraSlider.Root>\n    )\n  },\n)\n\nfunction SliderThumbs(props: { value?: number[] }) {\n  const { value } = props\n  return (\n    <For each={value}>\n      {(_, index) => (\n        <ChakraSlider.Thumb key={index} index={index}>\n          <ChakraSlider.HiddenInput />\n        </ChakraSlider.Thumb>\n      )}\n    </For>\n  )\n}\n\ninterface SliderMarksProps {\n  marks?: Array<number | { value: number; label: React.ReactNode }>\n}\n\nconst SliderMarks = React.forwardRef<HTMLDivElement, SliderMarksProps>(\n  function SliderMarks(props, ref) {\n    const { marks } = props\n    if (!marks?.length) return null\n\n    return (\n      <ChakraSlider.MarkerGroup ref={ref}>\n        {marks.map((mark, index) => {\n          const value = typeof mark === \"number\" ? mark : mark.value\n          const label = typeof mark === \"number\" ? undefined : mark.label\n          return (\n            <ChakraSlider.Marker key={index} value={value}>\n              <ChakraSlider.MarkerIndicator />\n              {label}\n            </ChakraSlider.Marker>\n          )\n        })}\n      </ChakraSlider.MarkerGroup>\n    )\n  },\n)\n"
  },
  "component": "Slider"
}